#!/bin/bash

all_stop()
{
    for ct in red green blue; do
        /usr/bin/lxc-stop -n "$ct"
    done
    sleep 3
}

all_start()
{
    for ct in red green blue; do
        /usr/bin/lxc-start -n "$ct" -d
    done
    sleep 5
}

all_etc_rclocal_eth0_down()
{
    for ct in red green blue; do
        /bin/cat > /var/lib/lxc/"$ct"/rootfs/etc/rc.local <<EOF
/sbin/ip link set dev eth0 down
exit 0
EOF
    done
}

all_etc_rclocal_empty()
{
    for ct in red green blue; do
        echo "exit 0" > /var/lib/lxc/"$ct"/rootfs/etc/rc.local
    done
}

all_veth_down()
{
    for ct in red green blue; do
        /sbin/ip link set dev veth-"$ct" down
    done
}

all_veth_flush()
{
    for ct in red green blue; do
        /sbin/ip address flush dev veth-"$ct"
    done
}

all_veth_up()
{
    for ct in red green blue; do
        /sbin/ip link set dev veth-"$ct" up
    done
}

all_persistent_empty_eth0()
{
    for ct in red green blue; do
        /bin/cat > /var/lib/lxc/"$ct"/rootfs/etc/network/interfaces <<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback
EOF
    done
}

all_nameserver()
{
    for ct in red green blue; do
        echo "nameserver 8.8.8.8" > /var/lib/lxc/"$ct"/rootfs/etc/resolv.conf
        echo "nameserver 8.8.8.8" > /var/lib/lxc/"$ct"/rootfs/etc/resolvconf/resolv.conf.d/tail
    done
}

ct_persistent_static_eth0()
{
    if test $# -lt 3; then
        echo "Unkown container, IP address and/or netmask"
        return
    fi
    ct="$1"
    ip="$2"
    mask="$3"
    /bin/cat > /var/lib/lxc/"$ct"/rootfs/etc/network/interfaces <<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
	address $ip
	netmask $mask
EOF

    # In case of gateway argument.
    if test $# -eq 4; then
        echo -e "\tgateway $4" >> /var/lib/lxc/"$ct"/rootfs/etc/network/interfaces
    fi
}

ct_veth()
{
    if test $# -lt 3; then
        echo "Unkown container, IP address and/or netmask"
        return
    fi
    ct="$1"
    ip="$2"
    mask="$3"

    /sbin/ip address flush dev veth-"$ct"
    /sbin/ip address add "$ip"/"$mask" dev veth-"$ct"
    /sbin/ip link set dev veth-"$ct" up
}

disable_routing()
{
    /sbin/sysctl -q -w net.ipv4.ip_forward=0
}

enable_routing()
{
    /sbin/sysctl -q -w net.ipv4.ip_forward=1
}

masquerade()
{
    /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
}

clear_iptables()
{
    /sbin/iptables -t filter -F
    /sbin/iptables -t nat -F
}

all_etc_hosts_empty()
{
    for ct in red green blue; do
        /bin/cat > /var/lib/lxc/"$ct"/rootfs/etc/hosts <<END
127.0.0.1   localhost  $ct

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
END
    done

    /bin/cat > /etc/hosts <<END
127.0.0.1   localhost host

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
END
}

all_etc_hosts_fill()
{
    host="$1"
    red="$2"
    green="$3"
    blue="$4"

    for ct in red green blue; do
        /bin/cat > /var/lib/lxc/"$ct"/rootfs/etc/hosts <<END
127.0.0.1   localhost

$host   host
$red    red
$green  green
$blue   blue

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
END
    done

    /bin/cat > /etc/hosts <<END
127.0.0.1   localhost

$host   host
$red    red
$green  green
$blue   blue

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
END
}

ct_etc_hosts_fill()
{
    ct="$1"
    host="$2"
    red="$3"
    green="$4"
    blue="$5"

    /bin/cat > /var/lib/lxc/"$ct"/rootfs/etc/hosts <<END
127.0.0.1   localhost

$host   host
$red    red
$green  green
$blue   blue

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
END
}

host_etc_hosts_fill()
{
    host="$1"
    red="$2"
    green="$3"
    blue="$4"

    /bin/cat > /etc/hosts <<END
127.0.0.1   localhost

$host   host
$red    red
$green  green
$blue   blue

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
END
}

all_add_pppoe_support()
{
    for ct in red green blue; do
        /bin/grep "108:0" /etc/lxc/auto/"$ct" > /dev/null 2>&1
        if test $? -ne 0; then
            /bin/echo "#PPP" >> /etc/lxc/auto/"$ct"
            /bin/echo "lxc.cgroup.devices.allow = c 108:0 rwm" >> /etc/lxc/auto/"$ct"
        fi
    done
    sleep 3
}

all_install_pppoe()
{
    for ct in red green blue; do
        /usr/bin/ssh -o StrictHostKeyChecking=no -l root "$ct" "/usr/bin/apt-get install -y ppp pppoeconf > /dev/null 2>&1"
        /usr/bin/ssh -o StrictHostKeyChecking=no -l root "$ct" "mknod /dev/ppp c 108 0 > /dev/null 2>&1"
    done
}

all_stop
all_add_pppoe_support
ct_persistent_static_eth0 red 192.168.1.2 255.255.255.0 192.168.1.1
ct_persistent_static_eth0 green 192.168.2.2 255.255.255.0 192.168.2.1
ct_persistent_static_eth0 blue 192.168.3.2 255.255.255.0 192.168.3.1
all_nameserver
all_start
ct_veth red 192.168.1.1 255.255.255.0
ct_veth green 192.168.2.1 255.255.255.0
ct_veth blue 192.168.3.1 255.255.255.0
host_etc_hosts_fill 192.168.1.1 192.168.1.2 192.168.2.2 192.168.3.2
enable_routing
clear_iptables
masquerade
all_install_pppoe
all_stop
all_persistent_empty_eth0
all_start
disable_routing
clear_iptables
all_etc_hosts_empty
all_veth_down
all_veth_flush
all_veth_up
